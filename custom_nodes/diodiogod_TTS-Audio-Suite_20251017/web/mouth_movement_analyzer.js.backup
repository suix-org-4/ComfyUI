import { app } from "../../scripts/app.js";

app.registerExtension({
    name: "ChatterboxTTS.MouthMovementAnalyzer",
    async beforeRegisterNodeDef(nodeType, nodeData) {
        if (nodeData.name === "MouthMovementAnalyzer") {
            const onNodeCreated = nodeType.prototype.onNodeCreated;
            nodeType.prototype.onNodeCreated = function() {
                const result = onNodeCreated ? onNodeCreated.apply(this, arguments) : undefined;
                
                // Create video container
                const videoContainer = document.createElement("div");
                videoContainer.style.width = "100%";
                videoContainer.style.marginTop = "10px";
                videoContainer.style.display = "none";
                
                // Create video element
                const video = document.createElement("video");
                video.controls = true;
                video.loop = true;
                video.muted = true;
                video.style.width = "100%";
                video.style.height = "auto";
                
                videoContainer.appendChild(video);
                
                // Add DOM widget
                this.addDOMWidget("video_preview", "video", videoContainer, {
                    serialize: false,
                    hideOnZoom: false
                });
                
                // Store references
                this.videoContainer = videoContainer;
                this.videoElement = video;
                
                return result;
            };
            
            // Override onExecuted like the audio analyzer
            const onExecuted = nodeType.prototype.onExecuted;
            nodeType.prototype.onExecuted = function(message) {
                console.log("🎥 onExecuted called with message:", message);
                
                const result = onExecuted ? onExecuted.apply(this, arguments) : undefined;
                
                // Check for video data in the message (videos use "gifs" key like VHS)
                if (message && message.gifs && message.gifs.length > 0) {
                    const videoData = message.gifs[0];
                    console.log("🎥 Video data found:", videoData);
                    
                    // Build parameters like VHS does - including subfolder
                    const params = new URLSearchParams({
                        filename: videoData.filename,
                        type: videoData.type,
                        subfolder: videoData.subfolder || '',
                        format: 'video/mp4'
                    });
                    
                    // Try multiple URL formats like VHS does
                    const possibleUrls = [
                        `/view?${params.toString()}`,
                        `/api/view?${params.toString()}`,
                        `/output/${videoData.filename}`,
                        `./output/${videoData.filename}`
                    ];
                    
                    console.log("🎥 Trying video URLs:", possibleUrls);
                    
                    // Show container first
                    this.videoContainer.style.display = "block";
                    
                    // Try URLs one by one
                    let urlIndex = 0;
                    const tryNextUrl = () => {
                        if (urlIndex >= possibleUrls.length) {
                            console.log("❌ All video URLs failed");
                            return;
                        }
                        
                        const videoUrl = possibleUrls[urlIndex++];
                        console.log(`🎥 Trying URL ${urlIndex}/${possibleUrls.length}: ${videoUrl}`);
                        
                        this.videoElement.src = videoUrl;
                        this.videoElement.load();
                        
                        // If this URL fails, try the next one
                        this.videoElement.onerror = () => {
                            console.log(`❌ Failed URL: ${videoUrl}`);
                            tryNextUrl();
                        };
                        
                        this.videoElement.onloadedmetadata = () => {
                            console.log(`✅ Success with URL: ${videoUrl}`);
                        };
                    };
                    
                    tryNextUrl();
                    
                    // Resize node to show video
                    this.setSize([this.size[0], this.size[1] + 200]);
                }
                
                return result;
            };
        }
    }
});