{"version":3,"file":"static/js/index.601ac604.js","sources":["webpack://frontend/./src/create-task/utils/get-node-info.ts"],"sourcesContent":["// Copyright (c) 2025 Bytedance Ltd. and/or its affiliates\n// SPDX-License-Identifier: GPL-3.0-or-later\nimport { ParamsConfigTypeItem } from '@common/type/batch-task';\nimport { getType, ValueTypeEnum } from '@common/utils/value-type';\nimport { Comfy } from '@typings/comfy';\n\n/** 获取当前输入项的上传限制配置 */\n\nexport const getUploadAccept = (value: any): string => {\n  const type = getType(value);\n  const zipSuffix = '.zip';\n\n  if (type === ValueTypeEnum.IMAGE) {\n    return `${zipSuffix}, .bmp, .jpg, .png, .tif, .gif, .pcx, .tga, .exif, .fpx,\n    .svg, .psd, .cdr, .pcd, .dxf, .ufo, .eps, .ai, .raw, .WMF, .webp, .jpeg`;\n  } else if (type === ValueTypeEnum.VIDEO) {\n    return `${zipSuffix}, .mp4, .avi, .mov,`;\n  } else {\n    return '.xls, .xlsx, .txt';\n  }\n};\n\nexport type ValueBaseType = string | number | boolean | undefined;\n\n/** 节点信息 */\nexport interface NodeInfo {\n  key: string;\n  paramValue: ValueBaseType | Array<ValueBaseType>;\n  paramType: ValueTypeEnum;\n  paramOptions: Array<ValueBaseType>;\n  uploadAccept: string;\n  isSeed: boolean;\n  nodeInfo: Comfy.Node | null;\n}\n\n/** 获取节点信息 */\nexport const getNodeInfo = (\n  nodeId: string | number | undefined,\n  internal_name: string | undefined,\n): NodeInfo => {\n  if (!nodeId) {\n    return {} as NodeInfo;\n  }\n\n  const nodeInfo = window.app.graph.getNodeById(nodeId);\n\n  const paramsInfo = nodeInfo?.widgets.find(\n    // @ts-ignore\n    (widget) => widget.name === internal_name,\n  );\n\n  const paramValue = paramsInfo?.value as any;\n\n  const paramOptions = (paramsInfo?.options?.values ??\n    []) as Array<ValueBaseType>;\n\n  const isControlAfterGenerate = Boolean(\n    paramsInfo?.linkedWidgets?.some(\n      // @ts-ignore\n      (item) => item.name === 'control_after_generate',\n    ),\n  );\n\n  const paramType = getType(paramValue);\n\n  console.log('nodeInfo', nodeInfo);\n\n  return {\n    key: `${nodeId}_${internal_name}`,\n    paramValue,\n    paramType,\n    paramOptions,\n    uploadAccept: getUploadAccept(paramValue),\n    isSeed: isControlAfterGenerate,\n    nodeInfo,\n  };\n};\n\n/**\n * @desc 判断当前值的类型是否正确\n * @param value 要判断的数据值\n * @param type 要判断的数据类型\n * @returns 类型匹配是否成功\n */\nexport const validateValueType = (\n  value: ValueBaseType,\n  type: ValueTypeEnum,\n): boolean => getType(value) === type;\n\n/** 获取节点信息key */\nexport const getNodeInfoKey = (config: ParamsConfigTypeItem): string =>\n  `${config?.nodeId}_${config?.internal_name}`;\n"],"names":[],"mappings":";AAcA"}